package main

import (
	"database/sql"
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	_ "github.com/mattn/go-sqlite3"
)

func main() {
	updateFlag := flag.Bool("update", false, "–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
	// updateCBR := flag.Bool("update-cbr", false, "–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë–†–§ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
	flag.Parse()

	db, err := sql.Open("sqlite3", "data/currency.db")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %s", err)
	}
	defer db.Close()
	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
	createTable(db)

	if *updateFlag {
		err := saveBitcoinPrice(db)
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã BTC: %s", err)
		}
		log.Println("–¶–µ–Ω–∞ BTC —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –¶–ë–†–§
		if err := updateCurrencyRatesFromCBR(db); err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –¶–ë–†–§: %s", err)
		}

		os.Exit(0) // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}

	fmt.Println("token:", token)
	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: %s", err)
	}

	// –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	for update := range updates {
		if update.Message == nil { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-—Å–æ–æ–±—â–µ–Ω–∏—è
			continue
		}

		// –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
		command := update.Message.Text
		switch {
		case strings.HasPrefix(command, "/start"):
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Telegram-–±–æ—Ç.")
			bot.Send(msg)
		case strings.HasPrefix(command, "/help"):
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help.")
			bot.Send(msg)
		case strings.HasPrefix(command, "/rate"):
			// // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –≤–∞–ª—é—Ç—ã
			// parts := strings.Fields(command)
			// if len(parts) < 2 {
			// 	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /rate USD.")
			// 	bot.Send(msg)
			// 	continue
			// }

			// currency := strings.ToUpper(parts[1])
			// rate, err := getCurrencyRate(db, currency)
			// if err != nil {
			// 	msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å –¥–ª—è –≤–∞–ª—é—Ç—ã %s.", currency))
			// 	bot.Send(msg)
			// } else {
			// 	msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ö—É—Ä—Å %s: %.2f", currency, rate))
			// 	bot.Send(msg)
			// }

			rates, err := getLatestCurrenciesRate(db)
			if err != nil {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å—ã"))
				bot.Send(msg)
			} else {
				message := "–ö–æ—Ç–∏—Ä–æ–≤–∫–∏: "
				btc := 0.0
				usd := 0.0
				eur := 0.0
				for code, r := range rates {
					if code == "BTC" {
						btc = r.Rate
					} else if code == "USD" {
						usd = r.Rate
					} else if code == "EUR" {
						eur = r.Rate
					}
				}

				// message += fmt.Sprintf("%s: %.2f (–æ–±–Ω–æ–≤–ª–µ–Ω–æ %s) ", code, r.Rate, r.Date)
				// message += fmt.Sprintf("BTC: %.2f, USD: %.2f, EUR: %.2f", btc, usd, eur)
				message += fmt.Sprintf("‚Çø $%.2f  üíµ %.2f‚ÇΩ  üí∂ %.2f‚ÇΩ", btc, usd, eur)

				msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
				bot.Send(msg)
			}

		case strings.HasPrefix(command, "/updatebtc"):
			err := saveBitcoinPrice(db)
			if err != nil {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã BTC: %v", err))
				bot.Send(msg)
			} else {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–¶–µ–Ω–∞ BTC —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
				bot.Send(msg)
			}

		case strings.HasPrefix(command, "/updatecbr"):
			err := updateCurrencyRatesFromCBR(db)
			if err != nil {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –¶–ë–†–§: %v", err))
				bot.Send(msg)
			} else {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ö—É—Ä—Å—ã USD –∏ EUR —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –¶–ë–†–§.")
				bot.Send(msg)
			}

		default:
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏–ª–∏ /help.")
			bot.Send(msg)
		}
	}
}

// createTable —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
func createTable(db *sql.DB) {
	query := `
	CREATE TABLE IF NOT EXISTS currency (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		code 	TEXT NOT NULL,
		nominal INTEGER NOT NULL,
		rate 	REAL NOT NULL,
		date 	TEXT NOT NULL,
		UNIQUE(code, date) -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ code –∏ date
	);`
	_, err := db.Exec(query)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: %s", err)
	}
}

// // seedData –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
// func seedData(db *sql.DB) {
// 	now := time.Now().Format("2006-01-02")
// 	_, err := db.Exec(`
// 	INSERT INTO currency (code, rate, date) VALUES
// 		('USD', 75.50, ?),
// 		('EUR', 82.30, ?);
// 	`, now, now)
// 	if err != nil {
// 		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %s", err)
// 	}
// }

// getCurrencyRate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –ø–æ –∫–æ–¥—É
func getCurrencyRate(db *sql.DB, code string) (float64, error) {
	var rate float64
	err := db.QueryRow("SELECT rate FROM currency WHERE code = ?", code).Scan(&rate)
	if err != nil {
		return 0, err
	}
	return rate, nil
}

// getCurrencyRate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –ø–æ –∫–æ–¥—É
func getCurrenciesRate(db *sql.DB) (float64, error) {
	var rate float64
	err := db.QueryRow("SELECT rate FROM currency").Scan(&rate)
	if err != nil {
		return 0, err
	}
	return rate, nil
}

// getLatestCurrencyRate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –ø–æ –∫–æ–¥—É
func getLatestCurrencyRate(db *sql.DB, code string) (float64, string, error) {
	var rate float64
	var date string
	err := db.QueryRow(`
		SELECT rate, date FROM currency
		WHERE code = ?
		ORDER BY date DESC
		LIMIT 1;
	`, code).Scan(&rate, &date)
	if err != nil {
		return 0, "", err
	}
	return rate, date, nil
}

// getLatestCurrenciesRate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
func getLatestCurrenciesRate(db *sql.DB) (map[string]struct {
	Rate float64
	Date string
}, error) {
	// –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	results := make(map[string]struct {
		Rate float64
		Date string
	})

	// SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫—É—Ä—Å–æ–≤
	query := `
		SELECT code, rate, date 
		FROM currency
		WHERE date IN (
			SELECT MAX(date) 
			FROM currency 
			GROUP BY code
		)
		ORDER BY code;
	`

	rows, err := db.Query(query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	for rows.Next() {
		var code string
		var rate float64
		var date string

		// –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
		err := rows.Scan(&code, &rate, &date)
		if err != nil {
			return nil, err
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		results[code] = struct {
			Rate float64
			Date string
		}{
			Rate: rate,
			Date: date,
		}
	}

	return results, nil
}

// saveBitcoinPrice –ø–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –±–∏—Ç–∫–æ–π–Ω–∞ –∏–∑ API Coinbase –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
func saveBitcoinPrice(db *sql.DB) error {
	// URL API Coinbase
	url := "https://api.coinbase.com/v2/prices/BTC-USD/spot"

	// –î–µ–ª–∞–µ–º HTTP-–∑–∞–ø—Ä–æ—Å
	resp, err := http.Get(url)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: %v", err)
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–Ω–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å: —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)
	}

	// –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
	var result struct {
		Data struct {
			Base     string `json:"base"`
			Currency string `json:"currency"`
			Amount   string `json:"amount"`
		} `json:"data"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: %v", err)
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ float64
	var price float64
	if _, err := fmt.Sscanf(result.Data.Amount, "%f", &price); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Ü–µ–Ω—ã: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
	now := time.Now().Format("2006-01-02")

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
	query := `
		INSERT INTO currency (code, rate, date) 
		VALUES (?, ?, ?)
		ON CONFLICT(code, date) DO UPDATE SET
		rate = excluded.rate;
	`
	_, err = db.Exec(query, "BTC", price, now)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É: %v", err)
	}

	log.Printf("–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ü–µ–Ω–∞ BTC: %.2f USD (–¥–∞—Ç–∞: %s)", price, now)
	return nil
}
